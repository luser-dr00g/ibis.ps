%!
%see manual below for description and usage.
%(../debug.ps/db5.ps)run %currentfile cvx debug


% ibisdict defs
%


%/ibisdict 50 dict begin currentdict def    %define internally
50 dict /ibisdict 1 index def begin         %define in userdict

(util.ps) run
(stack.ps) run
(device.ps) run
(kerning.ps) run
(textset.ps) run
(manuscript.ps) run

%
% Main interface.
% /ibis{} function
%

/src null def        % input file
/buf 200 string def  % line buffer
/exitflag false def

% call process on each line
%
/ibis { % file|string  ibis  -
    dup type /stringtype eq { (r) file } if
    dup type /filetype ne { NOT_A_FILE } if
    /src exch def

    %pstack()=
    {
        src buf readline {
            dup length 0 eq { blank }{ /justblank false store } ifelse
            %dup dup length 1 sub get = quit
            process
            heol
        }{
            %process
            exit
        }ifelse
        %heol
        exitflag { exit } if
    } loop

    eol %setline
    dev /marksonpage get { showpage } if

} bind def

% @@ define the at-sign as a command to print itself
sigil { sigil settext } def

/comment { pop () } def % delete the remaining source line, yield empty string back to /process
/c //comment def

(styles.ps) run

/default {
    text begin
    setfontfam
    72 setmargin
    x Y moveto
} bind def

%end ibis and return to postscript
/bye {/exitflag true store} bind def


% Print manual only if /manual is defined (eg. `gs -dmanual ibis.ps`).
% Uncomment this line to enable this, which allows running ibis.ps on other files.
% For ease of development, the source is maintained in this form to enable fast
% testing of changes. While the manual is being developed (in parallel), it also
% serves as an example and testbed.
%/manual where { pop }{ currentfile flushfile } ifelse 

%/i load == quit
%stepon
%traceon

default % nb. calls text begin. dictstack now contains: <ibisdict> <text>
%currentfile /ibis load debug
%currentfile ibis
(manual.ibis) (r) file ibis

%(stack:)= pstack(---)= currentfile flushfile


